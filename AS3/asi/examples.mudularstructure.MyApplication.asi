package examples.mudularstructure
{
	import examples.helloflash.HelloFlash;
	import examples.helloworld.MainHelloWorld;
	import examples.mudularstructure.transponder.CustomTransponder;
	import examples.mudularstructure.model.CustomModel;
	import examples.mudularstructure.view.CustomView;
	import examples.stats.MainStats;
	import org.bixbite.core.Application;

	/**
	 *
	 * @version compatibility 0.4.5
	 * @since 0.4.3
	 *   total footprint 10.04kb
	 *   
	 *     Purpose of this example is to show you true power of Bixbite MVC framework.
	 *   Due to architecture arrangement, MVC pattern and Signal/Slot system that keeps all classes perfectly decoupled, you can create number of small functional applications and put them together in no time, to create brand new application.
	 *   This is very powerful feature. To addition to high-performance structure you can very quickly build entire application from early developed small applications and run them all at once as modules.
	 *   Then, this class become main application that will be a bridge between functional modules. 
	 *   Going further, you can create another one app when this one will become a module!
	 *   
	 *     NAMS - Nested Application Modular System
	 *   
	 *     We going to use all previously developed examples.
	 */
	public class MyApplication extends Application
	{
		public function MyApplication ();

		/**
		 * Now, this is something worth consideration. Each functional triad might have some public methods exposed to control internal functional triads or modules.
		 * This way you can easily provide some API for your modules, than can be controlled from main Application directly.
		 * However indirectly you can still use Signals to even keep your modules decoupled!
		 * 
		 *   Bixbite MVC framework assuming this is perfectly fine to use both ways in this case.
		 * You need to consider yourself what better suits you for development purposes.
		 */
		public function exposedModuleMethod () : void;
	}
}
