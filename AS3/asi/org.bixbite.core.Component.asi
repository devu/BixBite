package org.bixbite.core
{
	import flash.display.Stage;
	import org.bixbite.core.interfaces.IComponent;
	import org.bixbite.core.interfaces.IData;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Component is an abstract base class for all actors of CDTV Pattern, Compound, Data, Transporder and View components</p>
	 * 
	 *   <p>Purpose of this class is to provide unified way to register the member within Emitter, get unique id and attach default signal into it. 
	 * As well as provide set of commonly shared methods for communication</p>
	 * @langversion	3.0
	 */
	public class Component implements IComponent
	{
		/**
		 *
		 * @private
		 *   Number of requests this Component has been registered within a core.
		 *   BixBite by default will keep your components as singletons and just need to know how many times is needed to keep it alive before destructor occures.
		 */
		var copies : int;

		/**
		 *
		 * @private
		 *   Every Component will invoke this assigment in order to get short reference to Emitter.
		 */
		var emitter : Emitter;

		/**
		 *
		 * @private
		 *   Based on Emitter short reference, every Component will get unique id from observer uid iterator.
		 */
		var _uid : String;

		/**
		 *
		 * @private
		 *   Default signal attached to this Component
		 */
		public var signal : Signal;

		/**
		 * Set of CDTV channels asociated with Emitter
		 */
		var channelC : Channel;
		var channelD : Channel;
		var channelT : Channel;
		var channelV : Channel;

		/**
		 * Unique Component identifier
		 */
		public function get uid () : String;

		/**
		 * Subject to change, there is a better abstraction needed
		 */
		public function get stage () : Stage;

		/**
		 * Constructor, Component is an abstract class, cannot be directly instatiated.
		 */
		public function Component ();

		/**
		 * Abstract method init must be overriden in subclasses.
		 * It has a function of an Constructor for all subclasses of Component. 
		 * This function will be invoced even before a native constructor.
		 */
		public function init () : void;

		/**
		 * Deconstructor of Component. 
		 * Will detach/unregister all registered signals form Emitter and clear all nesesary references.
		 * Subclasses should override this method and call super.destroy().
		 */
		public function destroy () : void;
	}
}
