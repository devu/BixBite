package org.bixbite.core
{
	import flash.display.Stage;
	import org.bixbite.core.interfaces.IComponent;
	import org.bixbite.core.interfaces.IData;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Component is a abstract base class for all actors of CDTV Compound pattern, Compound, Data, Transporder and View components</p>
	 * 
	 *   <p>Purpose of this class is to provide unified way to register the member within Emiter, get unique id and attach default signal into it. 
	 * As well as provide set of commonly shared methods for communication</p>
	 * @langversion	3.0
	 */
	public class Component implements IComponent
	{
		/**
		 *
		 */
		var copies : int;

		/**
		 *
		 * @private
		 *   Every Component will invoke this assigment in order to get short reference to Emiter.
		 */
		var emiter : Emiter;

		/**
		 *
		 * @private
		 *   Based on Emiter short reference, evey Component will get unique id from observer uid iterator.
		 */
		var _uid : String;

		/**
		 *
		 * @private
		 *   Slots reference to provide access to specific channel
		 */
		var slots : Object;

		/**
		 *
		 * @private
		 *   Default signal attached to this Component
		 */
		public var signal : Signal;

		/**
		 * Unique Component identifier
		 */
		public function get uid () : String;

		public function get stage () : Stage;

		/**
		 * Constructor, Component is an abstract class, cannot be directly instatiated.
		 */
		public function Component ();

		/**
		 * Abstract method init must be overriden in subclasses.
		 */
		public function init () : void;

		/**
		 * Deconstructor of Component. 
		 * Will detach/unregister all registered signals form Emiter and clear all nesesary references.
		 * Subclasses should override this method and call super.destroy().
		 */
		public function destroy () : void;
	}
}
