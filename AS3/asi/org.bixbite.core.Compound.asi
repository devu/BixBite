package org.bixbite.core
{
	import flash.display.DisplayObjectContainer;
	import flash.display.Sprite;
	import org.bixbite.core.interfaces.ICompound;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Compound represents default class you should subclass your Document Class with.</br>
	 * This is required to initialise Emiter and signal/slot system.</p>
	 * 
	 *   <p>Due to AS3 Document Class restrictions it must subclass DisplayObjectContainer this is why extends Sprite.</br>
	 * The only thing we need from it, is to access the system features. And implementation of this class may vary depends of target platforms.
	 * This is platform specific implementation when the Stage is the main system IO provider.</p>
	 * 
	 *   <p>In case you have more than one Compound running at the same time any following Compound will run as module, using the same reference of Emiter singleton to make shared signal/slot communication possible.
	 * This is very useful in modular projects. Consider application, for instance Preloader, that will load external swf build within BixBite framework as well.
	 * Preloader may have already some Components initialised you wish to reuse, so you don't have to repeat yourself.</p>
	 * @langversion	3.0
	 * @version 0.6.2
	 */
	public class Compound extends Component implements ICompound
	{
		private var behaviours : Object;

		public function Compound ();

		public function init () : void;

		/**
		 *
		 * @param	compound
		 */
		public function register (component:Class) : void;

		/**
		 *
		 * @param	component
		 */
		public function unregister (component:Class) : void;

		/**
		 * Add Behaviour into your Atom. 
		 * Atom implementation does't exist. It's only contractual and virtual name convention. It has been build into Compound for performance reason.
		 * @param	type
		 * @param	behaviour
		 * @param	autoDispose, dispose your Behaviour after being executed first time.
		 */
		public function addBehaviour (type:String, behaviour:Class, autoDispose:Boolean=false, autoExecute:Boolean=false) : void;

		/**
		 *
		 * @param	type
		 */
		public function removeBehaviour (type:String) : void;

		/**
		 *
		 * @param	type
		 * @param	params
		 */
		public function sendSignal (type:String, params:Object=null) : void;

		public function destroy () : void;
	}
}
