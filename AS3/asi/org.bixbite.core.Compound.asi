package org.bixbite.core
{
	import flash.display.Sprite;
	import flash.errors.IllegalOperationError;
	import org.bixbite.core.interfaces.ICompound;
	import org.bixbite.core.interfaces.ISignal;
	import org.bixbite.framework.view.StageView;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Compound represents default class you should subclass your Document Class with.</br>
	 * This is required to initialise Emiter and signal/slot system.</p>
	 * 
	 *   <p>Due to AS3 Document Class restrictions it must subclass DisplayObjectContainer this is why extends Sprite.<br>
	 * The only thing we need from it, is to access the system features. And implemementation of this class may vary depends of target platforms.
	 * This is platform specific implementation when the Stage is the main system IO provider.</p>
	 * 
	 *   <p>In case you have more than one Compound running at the same time any following Compound will run as module, usign the same reference of Emiter signleton to make shared signal/slot communication possible.
	 * This is very usefull in modular projects. Consider application, for instance Preloader, that will load external swf build within Bixbite framework as well. 
	 * Preloader may have already some Components initialised you wish to reuse, so you don't have to repeat yourself.</p>
	 * @langversion	3.0
	 * @version 0.5.0
	 * @example
	 *   <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 *   //Bixbite document class template
	 *   package  
	 *   {
	 *   import org.bixbite.mvc.Application;
	 *   
	 *     public class Main extends Compound 
	 *   {
	 *   public function Main() 
	 *   {
	 *   entry point
	 *   }
	 *   }
	 *   }
	 *   </codeblock>
	 */
	public class Compound extends Sprite implements ICompound
	{
		private var emiter : Emiter;
		private var slots : Object;
		private var _uid : String;
		private var _module : Boolean;
		private var _stageView : StageView;
		private var signal : ISignal;

		public function get module () : Boolean;
		function set module (value:Boolean) : void;

		/**
		 * Unique identifier of this Compound
		 */
		public function get uid () : String;

		/**
		 * Build in top view as a base for Composite View Pattern.
		 */
		public function get stageView () : StageView;

		public function Compound ();

		/**
		 * Add Behaviour into your Atom. 
		 * Atom implementation does't exist. It's only contractual and virtual name convention. It has been build into Compound for performance reason.
		 * @param	type
		 * @param	behaviour
		 * @param	autoDispose dispose your Behaviour after being executed.
		 */
		public function addBehaviour (type:String, behaviour:Class, autoDispose:Boolean=false) : void;

		/**
		 * Start Compound with a specific signal type.
		 * @param	type
		 */
		public function startup (type:String) : void;
	}
}
