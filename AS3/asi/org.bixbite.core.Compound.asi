package org.bixbite.core
{
	import org.bixbite.core.interfaces.ICompound;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Compound represents a container you can build your functional module within. You can register as many Components as you need to achive your goal. 
	 * As well add Behaviours into it to controll a business logic of the module. However it is strongly recomented to keep them small and clear. If 1 Compound performs multiple unrelated functions, consider refactoring it into set of smaller Compounds registered toogether.</p>
	 * 
	 *   <p>In case you have more than one instance of this Compound running at the same time any following Compound will run as module, using the same reference of Emiter to make shared signal/slot communication possible.
	 * This is very useful in modular projects. Consider application, for instance Preloader, that will load external swf build within BixBite framework as well.
	 * Preloader may have already some Components initialised you wish to reuse, so you don't have to repeat yourself.</p>
	 * @langversion	3.0
	 */
	public class Compound extends Component implements ICompound
	{
		private var behaviours : Object;

		public function Compound ();

		/**
		 *
		 * @param	component
		 */
		public function register (component:Class) : void;

		/**
		 *
		 * @param	component
		 */
		public function unregister (component:Class) : void;

		/**
		 * Add Behaviour into your Compound to controll business logic of your module
		 * @param	type
		 * @param	behaviour
		 * @param	autoDispose, dispose your Behaviour after being executed first time.
		 */
		public function addBehaviour (type:String, behaviour:Class, autoDispose:Boolean=false, autoExecute:Boolean=false) : void;

		/**
		 *
		 * @param	type
		 */
		public function removeBehaviour (type:String) : void;

		/**
		 *
		 * @param	type
		 * @param	params
		 */
		public function sendSignal (type:String, params:Object=null) : void;

		/**
		 *
		 * @param	type
		 * @param	params
		 */
		public function emitSignal (type:String, params:Object=null, multicore:Boolean=false) : void;

		/**
		 * deconstructor
		 */
		public function destroy () : void;
	}
}
