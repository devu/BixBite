package org.bixbite.core
{
	import flash.display.Stage;
	import flash.errors.IllegalOperationError;
	import org.bixbite.core.interfaces.IApplication;
	import org.bixbite.core.interfaces.ISignal;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Emiter, singleton, core of the Signal/Slot notification system of this framework.</p>
	 * <p>Provides set of methods for Actors and keeps it dead simple, fast and straight forward. First as well as second dimension relies on native AS3 Object only. Speed of accessibility, creation and deletion was the main important factor behind design decisions. 
	 * If you want to get closer to the native speed of execution, Emiter provides methods to cross-reference callbacks base on type of the signal.</p>
	 * <p>This implementation of notification system is the fastest, the simplest and lightest to compare to any other solution known in AS3. 
	 * This is the only solution that will give you robust structure, perfectly decoupled members of MVC triad and opportunity to execute it with the same seeped as a native local method speed accession. 
	 * You can't go faster than that. So you don't have to sacrifice anything from performance point of view, and you have very powerful modular system that doesn't require any changes if new component/class will be added/moved/removed from it.</p>
	 * <p>Signal/Slot system has been inspired by QT framework, and we took only essence of it.</p>
	 * @langversion	3.0
	 * @version 0.4.0
	 */
	public class Emiter
	{
		private static var _instance : Emiter;
		private static var isRunning : Boolean;
		private var _uid : int;
		private var _system : SystemIO;
		private var _application : IApplication;

		/**
		 * Main container for slot references.
		 */
		private var slots : Object;

		/**
		 * System I/O accessor. In AS3 implementation is a native stage
		 */
		public function get system () : SystemIO;

		/**
		 * Privides getter to unique id for all Actors.
		 * Each Actor will invoke this method on construction time and Observer's uid act as a fast system iterator.
		 */
		public function get uid () : int;

		/**
		 * The Emiter is a singleton, by default and only once via constructor will pass references to the main application.
		 * @param	application
		 */
		public function Emiter (application:IApplication);

		/**
		 * Internal method to add slot for any Actor.
		 * This is equivalent of addListener or registerNotification known from different systems and implementations.
		 * Can be invoked by any Actor.
		 * @param    callerUID, unique id of the caller
		 * @param    type, type of signal
		 * @param    callback, listener of the caller that will be added to the slot of certain type.
		 */
		function addSlot (callerUID:String, type:String, callback:Function) : void;

		/**
		 * Internal method to remove specific callback assigned to an Actor.
		 * Can be invoked by any Actor.
		 * @param	callerUID, unique id of the caller
		 * @param	type, type of signal
		 */
		function removeSlot (callerUID:String, type:String) : void;

		/**
		 * Remove all registered callbacks within a certain type of signal. 
		 * Can be invoked by any Actor.
		 * @param	type, type of signal
		 */
		function removeAllSlots (type:String) : void;

		/**
		 * Remove all registered signals of concrete Actor by his unique id.
		 * @param	uid, unique id of the caller
		 */
		function removeAllSlotsOf (uid:String) : void;

		/**
		 * Internal method to execute all callbacks assigned to certain type of signal.
		 * Can be invoked by any Actor.
		 * @param	type, type, type of signal
		 * @param	signal, attached to a caller
		 */
		function sendSignal (type:String, signal:ISignal) : void;

		/**
		 * Method to fast execute signal request and send direct response to a caller.
		 * Can be invoked by any View to notify Model or Controller, or by any Controller to notify Model.
		 * In case you want to use request/response callbacks associated with reponders must return their own signals;
		 * @param	type, type of signal
		 * @param	signal, attached to a caller
		 * @param	callback, listener of the caller that will be ivoked as soon as appropriate slot will be found.
		 */
		function sendRequest (type:String, signal:ISignal, callback:Function) : void;

		/**
		 * Internal method to handle signal referencing mechanism.
		 * Can be invoked by responders, Model or Controller.
		 * @param	type
		 * @return
		 */
		function getSlotReferences (type:String) : Array;

		/**
		 * Each Application will invoke this method in order to register itself within a Observer.
		 * Only first one will become root application, any next one will run as a module and get reference to same instance of Observer.
		 * @param    referrer
		 * @return
		 */
		public static function register (referrer:IApplication) : Emiter;

		/**
		 * Reference to a Singleton instance of Emiter class.
		 * @return
		 */
		public static function getInstance () : Emiter;

		/**
		 * Helper method to quick determination wheter object is empty or not.
		 * As soon as at least one property will be detected will return Boolean otherwise repor about empty object.
		 * @param	object to check
		 * @return 	boolean
		 */
		private function isEmpty (object:Object) : Boolean;
	}
}
