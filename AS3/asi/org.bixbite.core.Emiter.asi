package org.bixbite.core
{
	import flash.display.Stage;
	import flash.system.System;
	import flash.utils.Dictionary;
	import org.bixbite.core.interfaces.IData;
	import org.bixbite.namespaces.BIXBITE;
	import org.bixbite.utils.ClassUtil;

	/**
	 * <p>The Emiter, singleton, core of the Signal/Slot notification system of this framework.</p>
	 * <p>Provides set of methods for Components and keeps it dead simple, fast and straight forward. First as well as second dimension relies on native AS3 Object only. Speed of accessibility, creation and deletion was the main important factor behind design decisions. 
	 * If you want to get closer to the native speed of execution, Emiter provides methods to cross-reference callbacks base on type of the signal called SRS.</p>
	 * <p>This implementation of notification system is the fastest, the simplest and lightest to compare to any other solution known in AS3.
	 * This is the only solution that will give you robust structure, perfectly decoupled components and opportunity to execute it with the same seeped as a native local method speed accession.
	 * You can't go faster than that. So you don't have to sacrifice anything from performance point of view, and you have very powerful modular system that doesn't require any changes if new component/class will be added/moved/removed or refactored</p>
	 * <p>Signal/Slot system has been inspired by QT framework, and we took only essence of it.
	 * Current version of BixBite is capable of sending over 34.000.000 signals per second (AMD Athlon II 955 Quad Core)</p>
	 * @langversion	3.0
	 */
	public class Emiter
	{
		private static var _instance : Emiter;
		private var _uid : int;
		private var _stage : Stage;
		private var _slots : Object;
		private var components : Dictionary;

		/**
		 * Privides getter to unique id for all Components.
		 * Each Component will invoke this method on construction time. Emiter's uid getter act as a fast system iterator.
		 */
		public function get uid () : int;

		/**
		 *
		 */
		function get stage () : Stage;

		/**
		 * Retruns reference to all slot channels
		 */
		public function get slots () : Object;

		/**
		 * The Emiter is a singleton, by default and only once via constructor will pass references to the main Compound.
		 * @param	application
		 */
		public function Emiter (stage:Stage);

		/**
		 *
		 * @param	stage
		 */
		public static function startup (stage:Stage) : Emiter;

		/**
		 * Reference to a Singleton instance of Emiter class.
		 * @return
		 */
		public static function getInstance () : Emiter;

		/**
		 * Register component within BixBite
		 * @param	component
		 */
		function registerComponent (component:Class, singleton:Boolean=true) : void;

		/**
		 * Unregister component within BixBite
		 * @param	component
		 */
		function unregisterComponent (component:Class) : void;

		/**
		 *
		 * @private
		 *   Internal method to add slot for any Component.
		 *   This is equivalent of addListener or registerNotification known from different systems and implementations.
		 *   Can be invoked by any Component, however is encapsulated in subclasses in order to simplify API as well as specify concrete channels of communication.
		 * @param    channel, slot channel
		 * @param    callerUID, unique id of the caller
		 * @param    type, type of signal
		 * @param    callback, listener of the caller that will be added to the slot of certain type and channel
		 */
		function addSlot (channel:Object, callerUID:String, type:String, callback:Function) : void;

		/**
		 *
		 * @private
		 *   Internal method to remove specific callback assigned to an Component.
		 *   Can be invoked by any Component.
		 * @param   channel, slot channel
		 * @param	callerUID, unique id of the caller
		 * @param	type, type of signal
		 */
		function removeSlot (channel:Object, callerUID:String, type:String) : void;

		/**
		 *
		 * @private
		 *   Remove all registered callbacks within a certain type of signal. 
		 *   Can be invoked by any Component.
		 * @param   channel, slot channel
		 * @param	type, type of signal
		 */
		function removeAllSlots (channel:Object, type:String) : void;

		/**
		 *
		 * @private
		 *   Remove all registered signals of concrete Component by his unique id.
		 * @param   channel, slot channel
		 * @param	uid, unique id of the caller
		 */
		function removeAllSlotsOf (channel:Object, uid:String) : void;

		/**
		 *
		 * @private
		 *   Broadcast signal in Multi-cast mode on specific channel
		 * @param   channel, slot channel
		 * @param	type
		 * @param	signal
		 */
		function dataBroadcast (channel:Object, type:String, data:IData) : void;

		/**
		 *
		 * @private
		 *   Broadcast signal in Multi-cast mode on specific channel
		 * @param   channel, slot channel
		 * @param	type
		 * @param	signal
		 */
		function broadcast (channel:Object, type:String, signal:Signal) : void;

		/**
		 *
		 * @private
		 *   Send response directly to specific Component base on its unique ID
		 * @param   channel, slot channel
		 * @param	callerUID
		 * @param	type
		 * @param	signal
		 */
		function response (channel:Object, targetUID:String, type:String, signal:Signal) : void;

		/**
		 *
		 * @private
		 *   Send response directly to specific Component base on its unique ID
		 * @param   channel, slot channel
		 * @param	callerUID
		 * @param	type
		 * @param	signal
		 */
		function dataResponse (channel:Object, targetUID:String, type:String, data:IData) : void;

		/**
		 *
		 * @private
		 *   Reference Signal Mechanism - get reference to slot of specific type.
		 * @param	channel
		 * @param	type
		 * @return  array, of registered callbacks
		 */
		function getSlot (channel:Object, type:String) : Array;

		/**
		 *
		 * @private
		 *   Reference Signal Mechanism - get reference to Signal of specific type.
		 * @param	channel
		 * @param	type
		 * @return	signal, interface of signal
		 */
		function getSignal (channel:Object, type:String) : Signal;

		/**
		 *
		 * @private
		 *   Helper method to quick determination wheter object is empty or not.
		 *   As soon as at least one property will be detected will return Boolean otherwise repor about empty object.
		 * @param	object to check
		 * @return 	boolean
		 */
		private function isEmpty (object:Object) : Boolean;
	}
}
