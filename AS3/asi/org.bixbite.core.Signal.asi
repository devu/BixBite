package org.bixbite.core
{
	import org.bixbite.core.interfaces.ISignal;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>Signal is a base class for all signals being propagated within a system.
	 * Provides all necessary getters in read-only mode, and setters automatically controlled by framework.
	 * All those getters working together provides convenient way to make multiple variations and stay in tact with DRY rule.
	 * In this same time helping you solve all architectural problems without referencing objects and keep your Actors completely decoupled, unaware of each other make a perfect modular system to work with and more importantly easy to maintain.</p>
	 * 
	 *   <p>In case you need to send more valuable informations within an signal we recommend to create your Custom Signal class, that will extends this base Signal class.
	 * You will always stay type safe and have opportunity to ad as many values you want, keeps the basics unchanged and available for a system.
	 * You can have multiple Custom Signals to send different values defined for each actor. But by default there is only one Signal attached into Actor. 
	 * Also, you cannot send multiple signals from one Actor at the same time. You need to attach them to Actor before using attachSignal method.</p>
	 * @langversion	3.0
	 * @version 0.4.4
	 */
	public class Signal implements ISignal
	{
		private var _phase : int;
		private var _callerUID : String;
		private var _action : String;

		/**
		 * Phase
		 */
		public function get phase () : int;
		/**
		 *
		 * @private
		 */
		function set phase (value:int) : void;

		/**
		 * Unique identifier of the caller.
		 * This method will provide unique id of the Actor that sending particular signal.
		 * This will give you opportunity to respond directly to involved classes without cross-referencing them.
		 */
		public function get callerUID () : String;
		/**
		 *
		 * @private
		 *   System controlled setter for caller unique id.
		 */
		function set callerUID (value:String) : void;

		/**
		 * Read-only action is an additional and optional parameter, that will let you distinguish different requirements and perform some logical operations within the same type of signal when sending request.
		 * This is to avoid boilerplate-code and overloading signal/slot system too much.
		 * But can be invoked only by requesters using sendRequest method.
		 */
		public function get action () : String;
		/**
		 *
		 * @private
		 *   System controlled setter for action optional parameter
		 */
		function set action (value:String) : void;

		/**
		 * Public method to deconstruct signal
		 */
		public function dispose () : void;
	}
}
