package org.bixbite.core
{
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * The Behavior is an anthropomorphic construct that assigns "life" to the activities carried out by Compound in response to stimuli, such as user input (Transponder) or other Behaviours. 
	 * Also, "a behavior" is a reusable block of code that, when applied to an object, especially a graphical one, causes it to respond to user input in meaningful patterns or to operate independently.
	 * In BixBite Behaviours can broadcast signals to Views in Multi-cast and Signle-Cast mode.
	 * Because entire business logic is realised by set of Behaviours they can also request Data components. 
	 * Built in to Compound are the only bridge between application Data and View components.
	 * @langversion	3.0
	 */
	public class Behaviour
	{
		public var signal : Signal;
		private var emiter : Emiter;
		private var uid : String;
		private var type : String;
		private var autoDispose : Boolean;
		private var compound : Compound;
		var channelC : Channel;
		var channelD : Channel;
		var channelT : Channel;
		var channelV : Channel;

		public function Behaviour ();

		/**
		 * System controlled Internal emthod to initialise behaviour
		 * @param	emiter
		 * @param	type
		 * @param	slots
		 * @param	compound
		 */
		function initialise (emiter:Emiter, type:String, autoDispose:Boolean, compound:Compound) : void;

		/**
		 * System controlled Internal pre-execute method.
		 * @param	s
		 */
		function exe (s:Signal) : void;

		/**
		 * Abstract method to perform initial preparation before execute() is triggered.
		 */
		public function init () : void;

		/**
		 * Abstract method to hold executable block of code, that performs some business logic.
		 * @param	s signal being sent by coresponding Transponder
		 */
		public function execute (s:Signal) : void;

		/**
		 * Proxy method for behaviour to register any component within belonging Compound
		 * @param	component
		 */
		public function register (component:Class, singleton:Boolean=true) : void;

		/**
		 * Proxy method for behaviour to unregister any component from belonging Compound
		 * @param	component
		 */
		public function unregister (component:Class) : void;

		/**
		 * Add responder into Atom in order to request Data. You have opportunity to request data immediately setting autoRequest flag to true.
		 * @param	type
		 * @param	callback
		 * @param	autoRequest request data immediately
		 */
		public function addResponder (type:String, callback:Function, autoRequest:Boolean=false) : void;

		/**
		 * Remove responder by signal type
		 * @param	object
		 */
		public function removeResponder (type:String) : void;

		/**
		 * Request data component by signal type.
		 * @param	type
		 */
		public function sendRequest (type:String, params:Object=null) : void;

		/**
		 * Multi-cast method to broadcast one singal on entire Compound channel.
		 * This is also an output of any functional module, means any other Compound or Behaviour registered with can capture it.
		 * @param	type
		 * @param	params
		 */
		public function emitSignal (type:String, params:Object=null) : void;

		/**
		 * Multi-cast method to broadcast one singal on entire View channel.
		 * @param	type
		 * @param	params
		 */
		public function sendSignal (type:String, params:Object=null) : void;

		/**
		 * Signle-cast method to send signal to speific View component.
		 * @param	uid
		 * @param	type
		 * @param	params
		 */
		public function sendSignalTo (uid:String, type:String, params:Object=null) : void;

		/**
		 * SRS - Slot Reference System
		 * @param	type
		 * @return
		 */
		public function getSlots (type:String) : Slots;

		/**
		 * Deconstructor of behaviour.
		 */
		public function dispose () : void;
	}
}
