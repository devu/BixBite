package org.bixbite.framework.view
{
	import flash.display.DisplayObject;
	import flash.display.Graphics;
	import flash.display.Shape;
	import org.bixbite.core.View;
	import org.bixbite.framework.interfaces.IDisplayView;
	import org.bixbite.framework.interfaces.IDisplayViewContainer;

	/**
	 * DisplayView, part of Composite pattern of the display list. 
	 * The basic View extention to work with flash native DisplayObject.
	 * Solution built upon Decoration pattern, to wrap up native Objects into BixBite structure.
	 * Lets you control/expose selected aspects of your application or structure.
	 * @langversion	3.0
	 * @version 0.5.0
	 */
	public class DisplayView extends View implements IDisplayView
	{
		private var _context : DisplayObject;
		private var _parentView : IDisplayViewContainer;

		/**
		 * Parent view of this view
		 */
		public function get parentView () : IDisplayViewContainer;
		public function set parentView (value:IDisplayViewContainer) : void;

		/**
		 * Native Flash DisplayObject attached to this view
		 */
		public function get context () : DisplayObject;
		public function set context (value:DisplayObject) : void;

		/**
		 * Constructor
		 * @param	content, optional injector allow you pass custom and already prepared component from subclass as a content attached to this View.
		 */
		public function DisplayView ();

		/**
		 *
		 * @param	name
		 * @param	object
		 */
		public function setContext (name:String, object:DisplayObject) : void;

		/**
		 * Initialise DisplayView with a default native DisplayObject (by default Shape);
		 */
		public function init () : void;
	}
}
