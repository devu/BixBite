package test.performance.coreperf
{
	import flash.system.System;
	import flash.utils.clearInterval;
	import flash.utils.getTimer;
	import flash.utils.setInterval;
	import test.performance.coreperf.view.TestViewA;
	import test.performance.coreperf.view.TestViewB;
	import test.performance.coreperf.view.TestViewC;
	import org.bixbite.core.Compound;
	import test.performance.coreperf.behaviour.TestBehaviour;
	import test.performance.coreperf.behaviour.TraceOutput;
	import test.performance.coreperf.data.TestData;
	import test.performance.coreperf.transponder.TestTransponder;
	import test.performance.coreperf.view.OutputView;

	/**
	 *
	 * @langversion	3.0
	 *   footprint 11.0kb
	 *   
	 *     Purpose of this test is to keep track on speed of MVC actor creations. Since Bixbite is self-registered system there is much more going on under the hood.
	 *   During construction each Actor getting references to Emitter and getting default signal attached to it as well as unique identifier controlled by system.
	 *   During deconstruction (method destroy()) Object has to release all those references and clean up after itself.
	 *   Also Emitter always checking if there is empty slot will destroy it. This is why removal is always much slower.
	 *   
	 *     Taking under consideration all that, results below are still very satisfactory.
	 *   
	 *     Results:
	 *   
	 *     0.6.3	(Flash Player 11,1,102,63 - Chrome) max Mem 8.873 MB													
	 *   0.8.0 	(Flash PLayer 11,5,31,101 - Chrome) max Mem 4.615 MB
	 *   0.9.1 	(Flash PLayer 11,5,31,101 - Chrome) Mem min/max on test complete 20/9 MB
	 *   footprint 11.0kb
	 *   
	 *     versions									0.6.3	 0.8.0	   0.9.1
	 *   TASK:register	Views			10k			 1.00	  1.20		1.09
	 *   TASK:unregister	Views			10k			 2.00	  2.18	    2.00
	 *   TASK:register	Views			100k		17.00	 20.45	   19.00
	 *   TASK:unregister	Views			100k		22.00	 26.90	   23.00
	 *   TASK:register	Views			1kk		   181.64	216.82	  197.55
	 *   TASK:unregister	Views			1kk		   235.45	271.55	  246.91
	 *   
	 *     TASK:register	Trans			10k			 1.01	  1.18 	    1.09
	 *   TASK:unregister	Trans			10k			 2.00	  2.00		2.00
	 *   TASK:register	Trans			100k		18.00	 19.90	   19.00
	 *   TASK:unregister	Trans			100k		23.27	 26.00	   23.00
	 *   TASK:register	Trans			1kk		   198.91	207.82	  196.36
	 *   TASK:unregister	Trans			1kk		   259.00	269.55	  243.91
	 *   
	 *     TASK:register	Data			10k			 1.01	  1.09		1.09
	 *   TASK:unregister	Data			10k			 2.00	  2.00		2.00
	 *   TASK:register	Data			100k		19.00	 20.00	   19.00
	 *   TASK:unregister	Data			100k		25.00	 25.00	   23.81
	 *   TASK:register	Data			1kk		   197.91	208.91	  197.91
	 *   TASK:unregister	Data			1kk		   261.45	265.45 	  243.64
	 *   
	 *     TASK:add/remove Behaviour		1k			 4.36	  3.09 	    3.18
	 *   TASK:add/remove Behaviour		10k			54.91	 39.00 	   37.45
	 *   TASK:add/remove Behaviour		100k		766.91	402.18    387.82
	 *   
	 *     TASK:add/exe/dispose Behaviour	1k			4.82	  4.27 		3.09
	 *   TASK:add/exe/dispose Behaviour	10k			69.00	 42.45 	   39.36
	 *   TASK:add/exe/dispose Behaviour	100k		831.09	417.91 	  403.45
	 *   
	 *     TASK:reg/unreg Views			1k			  9.90	  2.09	  	2.00
	 *   TASK:reg/unreg Views			10k			107.55	 27.36	   24.54
	 *   TASK:reg/unreg Views			100k		991.00	271.55 	  251.82
	 *   TASK:reg/unreg Trans			1k			  7.54	  2.90		2.09
	 *   TASK:reg/unreg Trans			10k			 83.18	 28.90	   27.00
	 *   TASK:reg/unreg Trans			100k		1175.0	297.09 	  276.27
	 *   TASK:reg/unreg Data				1k			  7.09	  2.00		2.00
	 *   TASK:reg/unreg Data				10k			 77.00	 21.72	   20.63
	 *   TASK:reg/unreg Data				100k		916.55	219.91 	  208.36
	 *   
	 *     //Overloaded with real tasks
	 *   TASK:reg/unreg Views+Ctx+Slot		1k						   15.54
	 *   TASK:reg/unreg Views+Ctx+Slot		10k						  164.45
	 *   TASK:reg/unreg Views+Ctx+Slot		100k				 	 1663.80
	 *   
	 *     //Overloaded with real tasks and graphics
	 *   TASK:reg/unreg Views+Ctx+Gfx+Slot	1k						   19.91
	 *   TASK:reg/unreg Views+Ctx+Gfx+Slot	10k						  202.00
	 *   TASK:reg/unreg Views+Ctx+Gfx+Slot	100k					 2012.50
	 */
	public class CorePerformance extends Compound
	{
		private var results : Array;
		private var tasks : Array;
		private var iterator : int;
		private var task : int;
		private var repeat : int;
		private var runner : int;
		private var timeInterval : int;

		public function CorePerformance ();

		public function init () : void;

		private function run () : void;

		private function test1 (max:int, resultsId:int) : void;

		private function test2 (max:int, resultsId:int) : void;

		private function test3 (max:int, resultsId:int) : void;

		private function test4 (max:int, resultsId:int) : void;

		private function test5 (max:int, resultsId:int) : void;

		private function test6 (max:int, resultsId:int) : void;

		private function test7 (max:int, resultsId:int) : void;

		private function test8 (max:int, resultsId:int) : void;

		private function test9 (max:int, resultsId:int) : void;

		private function test10 (max:int, resultsId:int) : void;

		private function test11 (max:int, resultsId:int) : void;

		private function test12 (max:int, resultsId:int) : void;

		private function test13 (max:int, resultsId:int) : void;

		private function output (id:int) : void;
	}
}
