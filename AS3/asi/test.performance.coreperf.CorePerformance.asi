package test.performance.coreperf
{
	import flash.system.System;
	import flash.utils.clearInterval;
	import flash.utils.getTimer;
	import flash.utils.setInterval;
	import org.bixbite.core.Compound;
	import org.bixbite.framework.signal.StatsSignal;
	import org.bixbite.framework.Stats;
	import test.performance.coreperf.behaviour.TestBehaviour;
	import test.performance.coreperf.behaviour.TraceOutput;
	import test.performance.coreperf.data.TestData;
	import test.performance.coreperf.transponder.TestTransponder;
	import test.performance.coreperf.view.OutputView;
	import test.performance.coreperf.view.TestView;

	/**
	 *
	 * @langversion	3.0
	 *   footprint 11.0kb
	 *   
	 *     Purpose of this test is to keep track on speed of MVC actor creations. Since Bixbite is self-registered system there is much more going on under the hood.
	 *   During construction each Actor getting references to Emiter and getting default signal attached to it as well as unique identifier controlled by system.
	 *   During deconstruction (method destroy()) Object has to release all those references and clean up after itself.
	 *   Also Emiter always checking if there is empty slot will destroy it. This is why removal is always much slower.
	 *   
	 *     Taking under consideration all that, results below are still very satisfactory.
	 *   
	 *     Results: (0.6.3) CDTV (Flash Player 11,1,102,63 - Chrome) footprint 11.0kb
	 *   
	 *     TASK:register	Views			10k			TIME:   1.00
	 *   TASK:unregister	Views			10k			TIME:   2.00
	 *   TASK:register	Views			100k		TIME:  17.00
	 *   TASK:unregister	Views			100k		TIME:  22.00
	 *   TASK:register	Views			1kk			TIME: 181.64
	 *   TASK:unregister	Views			1kk			TIME: 235.45
	 *   
	 *     TASK:register	Trans			10k			TIME:   1.01
	 *   TASK:unregister	Trans			10k			TIME:   2.00
	 *   TASK:register	Trans			100k		TIME:  18.00
	 *   TASK:unregister	Trans			100k		TIME:  23.27
	 *   TASK:register	Trans			1kk			TIME: 198.91
	 *   TASK:unregister	Trans			1kk			TIME: 259.00
	 *   
	 *     TASK:register	Data			10k			TIME:   1.01
	 *   TASK:unregister	Data			10k			TIME:   2.00
	 *   TASK:register	Data			100k		TIME:  19.00
	 *   TASK:unregister	Data			100k		TIME:  25.00
	 *   TASK:register	Data			1kk			TIME: 197.91
	 *   TASK:unregister	Data			1kk			TIME: 261.45
	 *   
	 *     TASK:add/remove Behaviour		1k			TIME:   4.36
	 *   TASK:add/remove Behaviour		10k			TIME:  54.91
	 *   TASK:add/remove Behaviour		100k		TIME: 766.91
	 *   TASK:add/exe/dispose Behaviour	1k			TIME:   4.82
	 *   TASK:add/exe/dispose Behaviour	10k			TIME:  69.00
	 *   TASK:add/exe/dispose Behaviour	100k		TIME: 831.09
	 *   
	 *     TASK:reg/unreg Views			1k			TIME:   9.90
	 *   TASK:reg/unreg Views			10k			TIME: 107.55
	 *   TASK:reg/unreg Views			100k		TIME: 991.00
	 *   TASK:reg/unreg Trans			1k			TIME:   7.54
	 *   TASK:reg/unreg Trans			10k			TIME:  83.18
	 *   TASK:reg/unreg Trans			100k		TIME:1175.0
	 *   TASK:reg/unreg Data				1k			TIME:   7.09
	 *   TASK:reg/unreg Data				10k			TIME:  77.00
	 *   TASK:reg/unreg Data				100k		TIME: 916.55
	 */
	public class CorePerformance extends Compound
	{
		private var results : Array;
		private var tasks : Array;
		private var iterator : int;
		private var task : int;
		private var repeat : int;
		private var runner : int;

		public function CorePerformance ();

		public function init () : void;

		private function run () : void;

		private function test1 (max:int, resultsId:int) : void;

		private function test2 (max:int, resultsId:int) : void;

		private function test3 (max:int, resultsId:int) : void;

		private function test4 (max:int, resultsId:int) : void;

		private function test5 (max:int, resultsId:int) : void;

		private function test6 (max:int, resultsId:int) : void;

		private function test7 (max:int, resultsId:int) : void;

		private function test8 (max:int, resultsId:int) : void;

		private function test9 (max:int, resultsId:int) : void;

		private function test10 (max:int, resultsId:int) : void;

		private function test11 (max:int, resultsId:int) : void;

		private function output (id:int) : void;
	}
}
