package org.bixbite.core
{
	import flash.display.DisplayObject;
	import flash.errors.IllegalOperationError;
	import org.bixbite.core.interfaces.ITransponder;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The Transponder is a abstract class that emits an identifying signal in response to an interrogating received signals.</p>
	 * In computer science interrogate means transmit a signal for setting off an appropriate response.
	 * Handles mouse and keyboard inputs from the user, mediator between Views and Atom.</p>
	 * @langversion	3.0
	 * @version 0.5.0
	 */
	public class Transponder extends Component implements ITransponder
	{
		/**
		 * Constructor - this class cannot be directly instantiated.
		 */
		public function Transponder ();

		/**
		 * Add Slot / register callbacks of specific type of signal and asociate them with this Component as well as its communication channel.
		 * @param	type
		 * @param	callback
		 */
		public function addSlot (type:String, callback:Function) : void;

		/**
		 * Remove Slot / unregister this specific collback from being able to recieve any signals of specific type asociated with this Component.
		 * @param	type
		 */
		public function removeSlot (type:String) : void;

		/**
		 * Multicast (one-to-many) method to broadcast signals on Atom communication channel.
		 * TODO - test with multiple compounds if all atoms can recieve same signal from one Transponder.
		 * @param	type
		 * @param	params
		 */
		public function sendSignal (type:String, params:Array=null) : void;

		/**
		 * For performance critical purposes. Using cross-reference slot/signal mechanism will let you send aprox. 30.000.000 signals per second.
		 * Transponders can only reference slots of Atom.
		 * @param	type
		 * @return
		 */
		public function getSlotReference (type:String) : Array;

		/**
		 * Add platform native listeners in oreder to gather user/system inputs.
		 * @param	type
		 * @param	callback
		 */
		public function addSensor (type:String, callback:Function) : void;

		/**
		 * Remove platform native listeners.
		 * @param	type
		 * @param	callback
		 */
		public function removeSensor (type:String, callback:Function) : void;

		/**
		 * Find display objects (context of Views) by name under the current input point. 
		 * If object has been found transponder's signal will take over target uid. Otherwise will restore its own.
		 * @param	name
		 * @return
		 */
		public function findObjectByName (name:String) : Boolean;

		public function getObjectByName (name:String) : DisplayObject;

		public function findObjectByType (object:Class) : Boolean;

		/**
		 *
		 * @inheritDoc
		 */
		public function destroy () : void;
	}
}
