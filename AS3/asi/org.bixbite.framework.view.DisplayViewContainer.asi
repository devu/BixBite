package org.bixbite.framework.view
{
	import flash.display.DisplayObject;
	import flash.display.DisplayObjectContainer;
	import flash.display.Sprite;
	import org.bixbite.framework.interfaces.IDisplayView;
	import org.bixbite.framework.interfaces.IDisplayViewContainer;

	/**
	 * DisplayViewContainer, the most important class in Composition pattern in order to manipulate display list and create nested structures.
	 * Provides set of methods to handle children DisplayView of every DisplayObjectContainer.
	 * @langversion	3.0
	 * @version 0.2.9
	 */
	public class DisplayViewContainer extends DisplayView implements IDisplayViewContainer
	{
		private var _numViews : int;

		/**
		 * Array of views as a children of this view
		 */
		private var children : Array;

		/**
		 * Number of children views of this view
		 */
		public function get numViews () : int;

		/**
		 * Constructor
		 * @param	content, optional injector allow you pass custom and already prepared component from subclass as a content attached to this View.
		 */
		public function DisplayViewContainer (content:DisplayObjectContainer=null);

		/**
		 * Initialise DisplayView with a default native DisplayObjectContainer (by default Sprite);
		 */
		public function init () : void;

		/**
		 * Add child to this view
		 * @param	view, child view reference
		 * @param	addContent, flag to add child view's content automatically into native display list
		 * @return 	child view added to this view
		 */
		public function addView (view:IDisplayView) : IDisplayView;

		/**
		 * Add child to this view at specific index of children array
		 * @param	id, index of a child
		 * @param	view, child view reference
		 * @param	addContent, flag to add child view's content automatically into native display list
		 * @return 	child view added to this view
		 */
		public function addViewAt (id:int, view:IDisplayView) : IDisplayView;

		/**
		 * This private method will automatically add any Flash native displayable content into added DisplayView.
		 * @param	view
		 */
		private function addViewContent (view:IDisplayView) : void;

		public function addChild (child:DisplayObject) : DisplayObject;

		/**
		 * Remove child view base on reference
		 * @param	view, reference to child view to be removed
		 * @return 	reference to removed view
		 */
		public function removeView (view:IDisplayView) : IDisplayView;

		/**
		 * Remove child view base on index
		 * @param	id index of children array
		 * @return 	reference to removed view
		 */
		public function removeViewAt (id:int) : IDisplayView;

		/**
		 * Remove range of children views from current view
		 * @param	from start index
		 * @param	howMany number of elelemnts to remove counting from start index
		 * @return 	array of references to already removed views
		 */
		public function removeViewsAt (from:int, howMany:int) : Array;

		/**
		 * Remove all children views from current view
		 * @return 	array of references to already removed views
		 */
		public function removeAllViews () : Array;
	}
}
