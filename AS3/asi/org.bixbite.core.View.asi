package org.bixbite.core
{
	import org.bixbite.core.interfaces.IContext;
	import org.bixbite.core.interfaces.IView;
	import org.bixbite.namespaces.BIXBITE;

	/**
	 * <p>The View manages the graphical and/or textual output of the application.</p>
	 * <p>Framework provides basic implementation of nested structure of the Views aka Composite Pattern.
	 * Provides set of methods similar to the native Flash Display List and manages nested tree hierarchy.</p>
	 * <p>The View itself is just a subclass of Component to provide base abstract class ready to extend and work with.</p>
	 * @langversion	3.0
	 */
	public class View extends Component implements IView
	{
		/**
		 * Constructor - this class cannot be directly instantiated.
		 */
		public function View ();

		/**
		 * Add Slot / register callbacks of specific type of signal and asociate them with Actors.
		 * @param	type
		 * @param	callback
		 */
		public function addSlot (type:String, callback:Function) : void;

		/**
		 * Remove Slot / unregister this specific actor from being able to recieve any signals of specific type
		 * @param	type
		 */
		public function removeSlot (type:String) : void;

		/**
		 * Multi-cast method to broadcast one singal on entire Transponder channel.
		 * @param	type
		 */
		public function sendSignal (type:String, params:Object=null) : void;

		/**
		 * Multi-cast method to broadcast one singal on entire View channel.
		 * @param	type
		 * @param	params
		 */
		public function emitSignal (type:String, params:Object=null) : void;

		/**
		 * Single-cast method to send one singal to an View.
		 * @param	type
		 * @param	params
		 */
		public function emitSignalTo (targetUID:String, type:String, params:Object=null) : void;

		/**
		 * For performance critical purposes. Using SRS mechanism will let you send signals aprox. 10x faster.
		 * Views can only reference slots of Transponder Channel.
		 * @param	type
		 * @return 	array of slots
		 */
		public function getSlots (type:String) : Slots;

		/**
		 * Regsiter Context within a view
		 * @param	id
		 * @param	context
		 * @return  IContext instance of the created context as interface
		 */
		public function registerContext (id:String, context:Class) : Context;

		/**
		 * Unregsiter Context within a view
		 * @param	id
		 */
		public function unregisterContext (id:String) : void;

		/**
		 * Get registered context container
		 * @param	id
		 */
		public function getContainer (id:String) : ContextContainer;

		/**
		 *
		 * @inheritDoc
		 */
		public function destroy () : void;
	}
}
